{
	"compiler": {
		"version": "0.8.13+commit.abaa5c0e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "feeReward",
						"type": "uint256"
					}
				],
				"name": "Harvest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "version",
						"type": "uint8"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "RewardClaimed",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "staker",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"name": "Unstaked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "WETHDeposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "WETHWithdraw",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "AdminWETHWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PRECISION_FACTOR",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "PauseStaking",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ResumeStaking",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "WETH",
				"outputs": [
					{
						"internalType": "contract IERC20Upgradeable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_reward",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "period",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "APR",
								"type": "uint256"
							}
						],
						"internalType": "struct LPStakingV3.interestRate[]",
						"name": "_periodRates",
						"type": "tuple[]"
					}
				],
				"name": "addPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "addRewardToPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_stakeHolder",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_dId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isProrata",
						"type": "bool"
					}
				],
				"name": "calculateReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "depositDetails",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "depositId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "APR",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "period",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lastRewardCalculated",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "vestedFor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "NFTId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "deposits",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "depositId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "stake",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reward",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "APR",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "period",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lastRewardCalculated",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "poolId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "vestedFor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "NFTId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_period",
						"type": "uint256"
					}
				],
				"name": "getAPR",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAccMarketFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "getDeposits",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "depositId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "stake",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "reward",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "APR",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "period",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "lastRewardCalculated",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "poolId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "vestedFor",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "NFTId",
								"type": "uint256"
							}
						],
						"internalType": "struct LPStakingV3.stakeDetails[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_dId",
						"type": "uint256"
					}
				],
				"name": "getHavestAmount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					}
				],
				"name": "haveSuffecientFundsForReward",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_feeToken",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "_periods",
						"type": "uint256[]"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isPaused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "onlyaddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pausedTimestamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "periodPoolMap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "tvl",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalAllotedFeeReward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "periodSum",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "poolLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "pools",
				"outputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "reward",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tvl",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalAllotedReward",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalClaimedReward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "receiveWETHFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_only",
						"type": "address"
					}
				],
				"name": "setOnlyAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_period",
						"type": "uint256"
					}
				],
				"name": "stake",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "tokenPools",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalReward",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_totalReward",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "period",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "APR",
								"type": "uint256"
							}
						],
						"internalType": "struct LPStakingV3.interestRate[]",
						"name": "_periodRates",
						"type": "tuple[]"
					}
				],
				"name": "updateAPR",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "userDepositMap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "vestingAPRPerPool",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_dId",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "isForceWithdraw",
						"type": "bool"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_poolId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdrawRewardfromPool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"AdminWETHWithdraw()": {
					"details": "This function is used to withdraw WETH from contract from Admin only"
				},
				"PauseStaking()": {
					"details": "This function allows owner to pause contract."
				},
				"ResumeStaking()": {
					"details": "This function allows owner to resume contract."
				},
				"addPool(address,address,(uint256,uint256)[])": {
					"details": "This function will create new pool, access type is onlyOwner",
					"params": {
						"_periodRates": "APR percentage * 1000 for this pool.",
						"_reward": "Staking reward token address for this pool",
						"_token": "Staking token address for this pool. "
					}
				},
				"addRewardToPool(uint256,uint256)": {
					"details": "This funciton allows owner to add more reward amount to  this contract.",
					"params": {
						"_poolId": "pool's Id in which you want to add this reward.",
						"amount": "amount to be transfered from owner's wallet to this contract."
					}
				},
				"calculateReward(address,uint256,bool)": {
					"details": "This function is used to calculate Total reward for stakeHolder for pool",
					"params": {
						"_dId": "deposit id for reward calculation",
						"_stakeHolder": "The address of stakeHolder to calculate Total reward",
						"isProrata": "to calculate on prorata basis"
					},
					"returns": {
						"reward": "total reward"
					}
				},
				"getAccMarketFee()": {
					"details": "Function to get balance of this contract WETH market fee",
					"returns": {
						"_0": "uint balance of weth in wei"
					}
				},
				"getHavestAmount(address,uint256)": {
					"details": "Calculates users deposits WETH market fee reward",
					"returns": {
						"_0": "reward Total unclaimed WETH reward till now for specific deposit Id"
					}
				},
				"haveSuffecientFundsForReward(uint256)": {
					"details": "Function to check if contract have suffecient reward allowance or not",
					"params": {
						"_poolId": "The pool for which you want to check reward availibility"
					},
					"returns": {
						"_0": "True if have sufficient allowance for paying all the rewards"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"poolLength()": {
					"details": "This funtion will return the length of pools\\ which will be used to loop and get pool details.",
					"returns": {
						"_0": "Length of pool."
					}
				},
				"receiveWETHFee(uint256)": {
					"params": {
						"amount": "to deposit"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"stake(uint256,uint256,uint256)": {
					"details": "Allows user to stake the amount the pool. Calculate the old reward\\ and updates the reward, staked amount and current APR.",
					"params": {
						"_poolId": "The pool in which user wants to stake.",
						"tokenId": "The amount user wants to add into his stake."
					}
				},
				"totalReward()": {
					"details": "Calculate and return total undelivered rewards till now.",
					"returns": {
						"_totalReward": "Total unclaimed reward till now."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updateAPR(uint256,(uint256,uint256)[])": {
					"details": "This function allows owner to update APR for specific pool.",
					"params": {
						"_periodRates": "New APR percentage * 1000.",
						"_poolId": "pool's Id in which you want to update the APR."
					}
				},
				"withdraw(uint256,uint256,bool)": {
					"details": "Calculate the current reward and unstake the stake token, Transefer it to sender and update reward to 0",
					"params": {
						"_dId": "deposit id for getting reward fot deposit.",
						"_poolId": "Pool from which user want to claim the reward.",
						"isForceWithdraw": "bool flag for emergency withdraw."
					}
				},
				"withdrawRewardfromPool(uint256,uint256)": {
					"details": "This funciton allows owner to withdraw allotted reward amount from this contract.",
					"params": {
						"_poolId": "pool's Id in which you want to withdraw this reward.",
						"amount": "amount to be withdraw from contract to owner's wallet."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addPool(address,address,(uint256,uint256)[])": {
					"notice": "This Function will create new pool with the token address,\\ reward address and the APR percentage."
				},
				"addRewardToPool(uint256,uint256)": {
					"notice": "Let's you allot more reward fund in this contract."
				},
				"getHavestAmount(address,uint256)": {
					"notice": "This function will give you total of unclaimed rewards till now."
				},
				"haveSuffecientFundsForReward(uint256)": {
					"notice": "This function will return if it has sufficient fund for paying the reward"
				},
				"initialize(address,uint256[])": {
					"notice": "This method will be called once only by proxy contract to init."
				},
				"poolLength()": {
					"notice": "Get the length of pools and use it to loop for index."
				},
				"receiveWETHFee(uint256)": {
					"notice": "Receive WETH Fee Deposit only admin"
				},
				"stake(uint256,uint256,uint256)": {
					"notice": "This function will update your staked amount."
				},
				"tokenPools(address)": {
					"notice": "mapping to store current status for stakeHolder Explaination:  {      Staker: {           Pool: staking details      }  }"
				},
				"totalReward()": {
					"notice": "This function will give you total of unclaimed rewards till now."
				},
				"updateAPR(uint256,(uint256,uint256)[])": {
					"notice": "Let's you update the APR for this pool if you're current owner."
				},
				"withdraw(uint256,uint256,bool)": {
					"notice": "This function will transfer the reward earned till now and staked token amount."
				},
				"withdrawRewardfromPool(uint256,uint256)": {
					"notice": "Let's you withdraw reward fund in this contract."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"LPStaking.sol": "LPStakingV3"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34",
			"license": "MIT",
			"urls": [
				"bzz-raw://98c7bba29bcab7240cdaada7dd7cbe3529fec83314801270c46239e72a9e84d7",
				"dweb:/ipfs/QmfHCc1KMygjXchXVwafWTkFjhbb2SQ3Cu5GzRTdV4CCCh"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba",
			"license": "MIT",
			"urls": [
				"bzz-raw://6ec10894beb0f7537fba35e501fd1c5d35440e8c8f5ced1b8e57722a1d0879a8",
				"dweb:/ipfs/Qmbc3bNmtDewTGSmrPD93Ubp8saAz8xCxsgTjSmpNTqukz"
			]
		},
		"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
			"keccak256": "0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167",
			"license": "MIT",
			"urls": [
				"bzz-raw://607818f1b44548c2d8268176f73cdb290e1faed971b1061930d92698366e2a11",
				"dweb:/ipfs/QmQibMe3r5no95b6q7isGT5R75V8xSofWEDLXzp95b7LgZ"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
			"keccak256": "0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff",
			"license": "MIT",
			"urls": [
				"bzz-raw://75b47c3aeca7b66ea6752f8be020ec5c1c502de6ec9065272dae23d3a52196e2",
				"dweb:/ipfs/QmUebPMHv16tYKFh5BmBQkMfRFb5b8UZ2RgVwdjxCeufVF"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
			"keccak256": "0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e",
			"license": "MIT",
			"urls": [
				"bzz-raw://ca7bd5deecc4abd97f0218708c6e004953971cc62de68557fe0c6c8607f85a65",
				"dweb:/ipfs/QmRw3dGdS6ksHZiqcPRknYvWXfYP2hTj21PhkLjXyEVEf6"
			]
		},
		"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
			"keccak256": "0x5d3b80a09c746aed89446a14d0e8f5ba5212520360d00a495a2156a7a51497e5",
			"license": "MIT",
			"urls": [
				"bzz-raw://dfaceeb9548fa36e2af1e69cbc2bd5a8ba2b06ec62accba64fc123e1e0f120a1",
				"dweb:/ipfs/QmcF1kFRotifj9QBqhqNATaRQhQ6aoDAhSEEoKMc9VdKu3"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d",
			"license": "MIT",
			"urls": [
				"bzz-raw://37e4df53c8d2e3c1062c1c7b2c17366db7de03bfd2559d340ca95c588aa49c2f",
				"dweb:/ipfs/QmQ9vsG3o4wED3FRogiSUhdzJvZSjjYFtydzXvFEJtgZk4"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149",
			"license": "MIT",
			"urls": [
				"bzz-raw://d6520943ea55fdf5f0bafb39ed909f64de17051bc954ff3e88c9e5621412c79c",
				"dweb:/ipfs/QmWZ4rAKTQbNG2HxGs46AcTXShsVytKeLs7CUCdCSv5N7a"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
			"keccak256": "0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d",
			"license": "MIT",
			"urls": [
				"bzz-raw://c41e8a7a906b8f362c8b760a44edadc61782008ea2ecf377ac5b5325bf6c3912",
				"dweb:/ipfs/QmcXr19zuH3YLzD6RZNE6UTzvsKSckdxZQnagPoDGkCHu2"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
			"keccak256": "0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09",
			"license": "MIT",
			"urls": [
				"bzz-raw://92ad7e572cf44e6b4b37631b44b62f9eb9fb1cf14d9ce51c1504d5dc7ccaf758",
				"dweb:/ipfs/QmcnbqX85tsWnUXPmtuPLE4SczME2sJaTfmqEFkuAJvWhy"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
			"keccak256": "0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49",
			"license": "MIT",
			"urls": [
				"bzz-raw://9ba2a8d7cd7bdbd42a5c525103da0cd2d190a3f702b7e796bada67f6c613622e",
				"dweb:/ipfs/QmfZSHW9FxVdWwRAQ171dkhumCPEGfAFMXHPeipPc4M2ag"
			]
		},
		"LPStaking.sol": {
			"keccak256": "0xe3b7d0230a9d7504bfd7f3b725eb7226def05f79fbbbfff41b523382ec0d7bbb",
			"license": "MIT",
			"urls": [
				"bzz-raw://5ee8d652b60de13edb9c60a4696378cbd210b698954f7c46c440072c98e90f29",
				"dweb:/ipfs/QmWMHeJFWHAPn4WiWjXrT4rGGrhnX1soQZA6Tn7H5WAV2M"
			]
		}
	},
	"version": 1
}